/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.pushwoosh;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;

import androidx.annotation.NonNull;

import com.pushwoosh.Pushwoosh;
import com.pushwoosh.RegisterForPushNotificationsResultData;
import com.pushwoosh.exception.GetTagsException;
import com.pushwoosh.exception.PushwooshException;
import com.pushwoosh.exception.RegisterForPushNotificationsException;
import com.pushwoosh.function.Callback;
import com.pushwoosh.function.Result;
import com.pushwoosh.tags.TagsBundle;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;


@Kroll.module(name="PushWoosh", id="ti.pushwoosh")
public class PushWooshModule extends KrollModule
{
	// Standard Debugging variables
	private static final String LCAT = "PushWooshModule";

	public static String MODULE_NAME = "PushWoosh";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	private String notificationData = "";

	@Kroll.constant
	public static final String SHARED_PREFERENCES_NAME = "ti.pushwoosh.shared";

	@Kroll.constant
	public static final String ON_SET_TAG_SUCCESS = "onSetTagSuccess";

	@Kroll.constant
	public static final String ON_SET_TAG_ERROR = "onSetTagError";

	@Kroll.constant
	public static final String ON_REGISTER_SUCCESS = "onRegisterSuccess";

	@Kroll.constant
	public static final String ON_REGISTER_ERROR = "onRegisterError";

	@Kroll.constant
	public static final String ON_MESSAGE_RECEIVED = "onMessageReceived";

	@Kroll.constant
	public static final String ON_MESSAGE_OPENED = "onMessageOpened";

	private static PushWooshModule instance;

	public PushWooshModule() {
		super();
		instance = this;
		Log.d("Pushwoosh", "PushWooshModule constructor");
	}

	public static PushWooshModule getModuleInstance() {
		return instance;
	}

	static Pushwoosh pushwoosh;

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
		pushwoosh = Pushwoosh.getInstance();
	}

	@Kroll.method
	public Void registerForPushNotifications()
	{
		pushwoosh.registerForPushNotifications(new Callback<RegisterForPushNotificationsResultData, RegisterForPushNotificationsException>() {
			@Override
			public void process(@NonNull Result<RegisterForPushNotificationsResultData, RegisterForPushNotificationsException> result) {

				KrollDict dictCallback = new KrollDict();

				if (result.isSuccess()) {
					String token = Objects.requireNonNull(result.getData()).getToken();
					Log.i(LCAT, "Device was registered for notifications. Token: " + token);
					dictCallback.put("token", token);
					fireEvent(PushWooshModule.ON_REGISTER_SUCCESS, dictCallback);
				} else {
					Log.e(LCAT, "Error on device registration", result.getException());
					fireEvent(PushWooshModule.ON_REGISTER_ERROR, dictCallback);
				}

				parseBootIntent();
			}
		});

		return null;
	}

	public void setNotificationData(String data) {
		notificationData = data;
	}

	@Kroll.method
	@Kroll.getProperty
	private KrollDict getLastData()
	// clang-format on
	{
		KrollDict data = new KrollDict();

		try {
			Intent intent = TiApplication.getAppRootOrCurrentActivity().getIntent();
			Bundle extras = intent.getExtras();

			if (extras != null) {
				for (String key : extras.keySet()) {
					Object extraValue = extras.get(key);

					if (extraValue instanceof Bundle) {
						Bundle bundle = (Bundle) extraValue;
						for (String bundleKey : bundle.keySet()) {
							data.put(key + "_" + bundleKey, String.valueOf(bundle.get(bundleKey)));
						}
					} else if (extraValue != null) {
						data.put(key, String.valueOf(extraValue));
					}
				}

				data.put("inBackground", true);
			} else {
				Log.d(LCAT, "Empty extras in Intent");
				if (!notificationData.isEmpty()) {
					data = new KrollDict(new JSONObject(notificationData));
					data.put("inBackground", true);
				}
			}

			if (data.get("message") == null) {
				Context context = TiApplication.getInstance().getApplicationContext();
				SharedPreferences preferences = context.getSharedPreferences(SHARED_PREFERENCES_NAME, Context.MODE_PRIVATE);
				String prefMessage = preferences.getString("ti.pushwoosh.data", null);
				Log.d(LCAT, "prefMessage: " + prefMessage);
				if (prefMessage != null) {
					data.put("message", new KrollDict(new JSONObject(prefMessage)));
				}
				preferences.edit().remove("ti.pushwoosh.data").apply();
			}
		} catch (Exception ex) {
			Log.e(LCAT, "getLastData" + ex);
		}

		return data;
	}

	// Methods
	@Kroll.method
	public void getTagValue(final String tagName, final KrollFunction callback) {
		Pushwoosh.getInstance().getTags(new Callback<TagsBundle, GetTagsException>() {
			@Override
			public void process(@NonNull Result<TagsBundle, GetTagsException> result) {
				KrollDict response = new KrollDict();
				if (result.isSuccess()) {
					Map<String, Object> tags = Objects.requireNonNull(result.getData()).getMap();
					if (tags.containsKey(tagName)) {
						Object tagValue = tags.get(tagName);
						response.put("success", true);
						response.put("value", tagValue);
					} else {
						response.put("success", true);
						response.put("value", null);
					}
				} else {
					response.put("success", false);
					response.put("error", result.getException() != null
							? result.getException().getMessage()
							: "Erro desconhecido ao obter tag");
				}

				if (callback != null) {
					callback.callAsync(getKrollObject(), response);
				}
			}
		});
	}

	@Kroll.method
	public void setTags(@NonNull KrollDict tags) {

		Log.d(LCAT, tags.toString());

		TagsBundle.Builder tagsBuilder = new TagsBundle.Builder();

		for (String key : tags.keySet()) {
			Object value = tags.get(key);
			if (value instanceof String){
				tagsBuilder.putString(key, (String) value);
			} else if (value instanceof Integer){
				tagsBuilder.putInt(key, (Integer) value);
			} else if (value instanceof Long){
				tagsBuilder.putLong(key, (Long) value);
			} else if (value instanceof Boolean){
				tagsBuilder.putBoolean(key, (Boolean) value);
			} else if (value instanceof Object[] array) {
                List<String> stringList = new ArrayList<>();
				for (Object item : array) {
					if (item instanceof String) {
						stringList.add((String) item);
					}
				}
				tagsBuilder.putList(key, stringList);
			}
		}

		TagsBundle ready_tags = tagsBuilder.build();
		if (!ready_tags.getMap().isEmpty()) {
			Pushwoosh.getInstance().setTags(ready_tags, new Callback<Void, PushwooshException>() {
				@Override
				public void process(@NonNull Result<Void, PushwooshException> result) {
					if (result.isSuccess()) {
						fireEvent(ON_SET_TAG_SUCCESS, new KrollDict());
					} else {
						KrollDict errorData = new KrollDict();
						errorData.put("error", result.getException().getMessage());
						fireEvent(ON_SET_TAG_ERROR, errorData);
					}
				}
			});
		} else {
			Log.d(LCAT, "No tags to set");
		}
	}

	public void parseBootIntent() {
		Log.d(LCAT, "parseBootIntent");

		Intent intent = TiApplication.getAppRootOrCurrentActivity().getIntent();
		String pushData = intent.getStringExtra("ti.pushwoosh.data");
		Log.d(LCAT, "pushData: " + pushData);

		if (pushData != null) {
			Context context = TiApplication.getInstance().getApplicationContext();
			SharedPreferences prefs = context.getSharedPreferences("push_prefs", Context.MODE_PRIVATE);

			// Verifica se essa notificação já foi processada
			// if (!prefs.getBoolean(pushData, false)) {
				// Marcar como processada
				prefs.edit().putBoolean(pushData, true).apply();

				Log.d(LCAT, "Processing new push data from Intent: " + pushData);

				HashMap<String, Object> msg = new HashMap<>();
				msg.put("customData", pushData);
				onMessageReceived(msg);
//			} else {
//				Log.d(LCAT, "Push data already processed: " + pushData);
//			}
		} else {
			Log.d(LCAT, "No push data found in Intent");
		}
	}

	public void onMessageReceived(HashMap<String, Object> message) {
		try {
			if (hasListeners(ON_MESSAGE_OPENED)) {
				KrollDict data = new KrollDict();
				data.put("message", new KrollDict(message));
				fireEvent(ON_MESSAGE_OPENED, data);
			}
		} catch (Exception e) {
			Log.e(LCAT, "Message exception: " + e.getMessage());
		}
	}
}


